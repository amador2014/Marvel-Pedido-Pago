import { useState } from "react";

import Head from "next/head";
import { GetStaticProps } from "next";

import { api } from "../services/api";
import md5 from "js-md5";

import styles from "../styles/Home.module.css";

type Character = {
  id: number;
  name: string;
  description: string;
};

interface HomeProps {
  characters: Character[];
}

export default function Home({ characters }: HomeProps) {
  const [isFetching, setIsFetching] = useState<Boolean>(false);

  return (
    <div className={styles.container}>
      <Head>
        <title>Marvel Next App - Pedido Pago</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">UI Marvel Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{" "}
          <code className={styles.code}>pages/index.js</code>
        </p>

        {characters.map(character => {
          return <p key={character.id}>{character.name}</p>;
        })}
      </main>
    </div>
  );
}

export const getStaticProps: GetStaticProps = async context => {
  const ts = Number(new Date());
  const hash = md5.create();
  hash.update(ts + process.env.API_PRIVATE_KEY! + process.env.API_PUBLIC_KEY!);

  try {
    const { data } = await api.get(
      `v1/public/characters?ts=${ts}&apikey=${process.env.API_PUBLIC_KEY}&hash=${hash}`,
      {
        params: {
          offset: 0,
          limit: 20,
          orderBy: "name",
        },
      }
    );
    
    console.log("**************************************")
    console.log(data)

    const characters = data.data.results?.map((character: Character) => {
      return {
        id: character.id,
        name: character.name,
        description: character.description,
      };
    });

    return {
      props: {
        characters,
      },
    };
  } catch (exe) {
    throw new Error(exe.Message);
  }
};
